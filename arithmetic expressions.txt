#include <stdio.h>  
#include <stdlib.h>  
#include <ctype.h> 
#include <string.h>  
  
#define MAX_SIZE 67 
int stack[100];  
int top = -1;  
void push(int item) {  
    if (top >= MAX_SIZE - 1) {  
        printf("Stack Overflow\n");  
        return;  
    }  
    top++;  
    stack[top] = item;  
}  
int pop() {  
    if (top < 0) {  
        printf("Stack Underflow\n");  
        return -1;  
    }  
    int item = stack[top];  
    top--;  
    return item;  
}  
int is_operator(char symbol) {  
    if (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/') {  
        return 1;  
    }  
    return 0;  
}  
int evaluate(char* expression) {  
    int i = 0;  
    char symbol = expression[i];  
    int operand1, operand2, result;  
  
    while (symbol != '\0') {  
        if (symbol >= '0' && symbol <= '9') {  
            int num = symbol - '0';  
            push(num);  
        }  
        else if (is_operator(symbol)) {  
            operand2 = pop();  
            operand1 = pop();  
            switch(symbol) {  
                case '+': result = operand1 + operand2; break;  
                case '-': result = operand1 - operand2; break;  
                case '*': result = operand1 * operand2; break;  
                case '/': result = operand1 / operand2; break;  
            }  
            push(result);  
        }  
        i++;  
        symbol = expression[i];  
    }  
    result = pop();  
    return result;  
} 
int precedence(char symbol) {  
    if (symbol == '+' || symbol == '-')  
        return 1;  
    if (symbol == '*' || symbol == '/')  
        return 2;  
    return 0;  
}  
void infix_to_postfix(char* infix, char* postfix) {  
    int i = 0, j = 0;  
    while (infix[i] != '\0') {  
        if (isdigit(infix[i])) {  
            postfix[j++] = infix[i++];  
        }  
        else if (is_operator(infix[i])) {  
            while (top >= 0 && precedence(stack[top]) >= precedence(infix[i])) {  
                postfix[j++] = pop();  
            }  
            push(infix[i++]);  
        }  
        else if (infix[i] == '(') {  
            push(infix[i++]);  
        }  
        else if (infix[i] == ')') {  
            while (top >= 0 && stack[top] != '(') {  
                postfix[j++] = pop();  
            }  
            if (top >= 0 && stack[top] == '(')  
                pop(); 
            i++;  
        }  
        else {   
            i++;  
        }  
    }  
    while (top >= 0) {  
        postfix[j++] = pop();  
    }  
    postfix[j] = '\0';  
}  

  
int main() {  
    char infix[] = "(5+6*7)-8";  
    char postfix[100];  
    infix_to_postfix(infix, postfix);  
    printf("Postfix expression: %s\n", postfix);  
    int result = evaluate(postfix);  
    printf("Result= %d\n", result);  
    return 0;  
}