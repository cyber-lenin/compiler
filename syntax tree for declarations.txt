#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct TreeNode {
    char *data;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

TreeNode* createNode(char *data) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = strdup(data);
    if (newNode->data == NULL) {
        printf("Memory allocation failed\n");
        free(newNode);
        exit(EXIT_FAILURE);
    }
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void freeTree(TreeNode *root) {
    if (root == NULL) return;
    freeTree(root->left);
    freeTree(root->right);
    free(root->data);
    free(root);
}

void printTree(TreeNode *root, int depth) {
    if (root == NULL) return;
    printTree(root->right, depth + 1);
    for (int i = 0; i < depth; i++) {
        printf("    ");
    }
    printf("%s\n", root->data);
    printTree(root->left, depth + 1);
}

TreeNode* parseDeclarations(char *declarations) {
    char *token = strtok(declarations, ",");
    TreeNode *root = createNode(token);
    TreeNode *current = root;

    while ((token = strtok(NULL, ",")) != NULL) {
        current->right = createNode(token);
        current = current->right;
    }

    return root;
}

int main() {
    char declarations[100];

    printf("Enter declarations separated by commas: ");
    fgets(declarations, sizeof(declarations), stdin);

    declarations[strcspn(declarations, "\n")] = '\0';

    TreeNode *syntaxTree = parseDeclarations(declarations);

    printf("Syntax tree for declarations:\n");
    printTree(syntaxTree, 0);
    printf("\n");

    freeTree(syntaxTree);

    return 0;
}
